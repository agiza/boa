#!/bin/bash


###----------------------------------------###
###
###  Octopus Aegir Installer
###
###  Copyright (C) 2010-2015 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This program is free software. You can
###  redistribute it and/or modify it under
###  the terms of the GNU GPL as published by
###  the Free Software Foundation, version 2
###  or later.
###
###  This program is distributed in the hope
###  that it will be useful, but WITHOUT ANY
###  WARRANTY; without even the implied
###  warranty of MERCHANTABILITY or FITNESS
###  FOR A PARTICULAR PURPOSE. See the GNU GPL
###  for more details.
###
###  You should have received a copy of the
###  GNU GPL along with this program.
###  If not, see http://www.gnu.org/licenses/
###
###  Code: https://code.aegir.cc/aegir
###
###----------------------------------------###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter below your valid e-mail address and
### the (sub)domain for this Aegir Satellite
### Instance, already pointing to your server.
### Define also your *new* Aegir user for this
### instance or existing if this is an upgrade
###
### NOTE: if this is an upgrade, it's enough
### to define the _USER value only, since
### _DOMAIN etc. will be auto-discovered
### and you can't override it here nor even
### in the /root/.${_USER}.octopus.cnf file.
###
_USER=o1
_MY_EMAIL="agiza@viewsation.com"
_CLIENT_EMAIL="agiza@viewsation.com"
_CLIENT_OPTION=SSD
_CLIENT_SUBSCR=Y
_CLIENT_CORES=8


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

###
### Variables
###
_D8_DEV_COMMIT=8x_18b3d4af
_DRUSH_VERSION=mini-7-18-01-2015
_NOW=$(date +%y%m%d-%H%M 2>&1)
_PLATFORMS_ONLY=NO
_PURGE_FOR_SEVEN=YES
_REDIS_M_VERSION=mod-14-12-2014
_SMALLCORE6=6.34.1
_SMALLCORE7=7.34.1
_SMALLCORE8=8.0.0-beta4
_SPINNER=YES
_T_BUILD=HEAD
_TODAY=$(date +%y%m%d 2>&1)
_USRG=users
_WEBG=www-data
PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
if [ -n "${STY+x}" ]; then
  _SPINNER=NO
fi

###
### Instance specific variables
###
_WEB="${_USER}.web"
_DOMAIN="${_USER}.$(uname -n 2>&1)"
octCnf="/root/.${_USER}.octopus.cnf"

###
### Helper variables
###
bldPth="/opt/tmp/boa"
crlGet="-L --max-redirs 10 -k -s --retry 10 --retry-delay 5 -A iCab"
filIncO="octopus.sh.cnf"
gCb="git clone --branch"
gitHub="git://github.com/omega8cc"
libFnc="${bldPth}/lib/functions"
tocIncO="${filIncO}.${_USER}"
vBs="/var/backups"

###
### Distributions
###
_AGOV=1.6
_CIVICRM_M6=4.1.6
_CIVICRM_M7=4.3.7
_COD=1.0-alpha5
_COMMERCE1=1.32
_COMMERCE2=2.20
_COMMONS2=2.21
_COMMONS3=3.20
_D8_DEV_LABEL="8-dev-${_TODAY}"
_DRUPAL7="drupal-${_SMALLCORE7}"
_DRUPAL8="drupal-${_SMALLCORE8}"
_ERPAL=2.2
_GUARDR=2.5
_OPENACADEMY=1.1
_OPENATRIUM7=2.26
_OPENBLOG=1.0-alpha3
_OPENCHURCH1=1.17-beta1
_OPENCHURCH2=2.1-beta3
_OPENDEALS=1.35
_OPENOUTREACH=1.14
_OPENPUBLIC=1.4
_OPENPUBLISH=1.0-beta7
_OPENSCHOLAR=3.16.0
_PANOPOLY=1.15
_RECRUITER=1.3
_RESTAURANT=1.0-beta10
_UBERCART6=2.14
_UBERCART7=3.8


###
### Include helper functions
###
if [ -e "${vBs}/${tocIncO}" ]; then
  source "${vBs}/${tocIncO}"
  tInc="${vBs}/${tocIncO}"
elif [ -e "${vBs}/${filIncO}" ]; then
  source "${vBs}/${filIncO}"
  tInc="${vBs}/${filIncO}"
else
  msg "EXIT: Required lib file does not exist?"
  msg "EXIT: ${tInc}"
  msg "EXIT: Cannot continue"
  msg "EXIT: Bye (0)"
  clean_pid_exit
fi
touch /var/run/boa_run.pid

# Clean pid files on exit.
clean_pid_exit() {
  rm -f /var/run/boa_wait.pid
  rm -f /var/run/boa_run.pid
  service cron start &> /dev/null
  exit 1
}
#
# Noticeable messages.
msg() {
  echo "BOA [$(date +%T 2>&1)] ==> $*"
}
# Simple prompt.
prompt_yes_no() {
if [ "${_AUTOPILOT}" = "YES" ]; then
  return 0
else
  while true; do
    printf "$* [Y/n] "
    read answer
    if [ -z "${answer}" ]; then
      return 0
    fi
    case ${answer} in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
  done
fi
}
#
# Small spinner.
mrun() {
  CMD="$1"
  touch busy
  if [ "${_SPINNER}" = "YES" ]; then
    bash ${_SRCDIR}/spinner busy &
  fi
  if ${CMD} >> ${_LOG}; then
    rm busy
    sleep 1
    return 0
  fi
}
#
# Find the fastest mirror.
find_fast_mirror() {
  isNetc=$(which netcat 2>&1)
  if [ ! -x "${isNetc}" ] || [ -z "${isNetc}" ]; then
    apt-get update -qq &> /dev/null
    apt-get install netcat -y --force-yes --reinstall &> /dev/null
    sleep 3
  fi
  ffMirr=$(which ffmirror 2>&1)
  if [ -x "${ffMirr}" ]; then
    ffList="/var/backups/boa-mirrors.txt"
    mkdir -p /var/backups
    if [ ! -e "${ffList}" ]; then
      echo "jp.files.aegir.cc"  > ${ffList}
      echo "nl.files.aegir.cc" >> ${ffList}
      echo "uk.files.aegir.cc" >> ${ffList}
      echo "us.files.aegir.cc" >> ${ffList}
    fi
    if [ -e "${ffList}" ]; then
      _CHECK_MIRROR=$(bash ${ffMirr} < ${ffList} 2>&1)
      _USE_MIR="${_CHECK_MIRROR}"
      [[ "${_USE_MIR}" =~ "printf" ]] && _USE_MIR="files.aegir.cc"
    else
      _USE_MIR="files.aegir.cc"
    fi
  else
    _USE_MIR="files.aegir.cc"
  fi
  if ! netcat -w 10 -z "${_USE_MIR}" 80; then
    echo "INFO: The mirror ${_USE_MIR} doesn't respond, let's try default"
    _USE_MIR="files.aegir.cc"
  fi
  urlDev="http://${_USE_MIR}/dev"
  urlHmr="http://${_USE_MIR}/versions/master/aegir"
  urlStb="http://${_USE_MIR}/versions/stable"
}
#
# Tune FPM workers.
tune_fpm_workers() {
  _ETH_TEST=$(ifconfig 2>&1)
  _VM_TEST=$(uname -a 2>&1)
  if [[ "${_ETH_TEST}" =~ "venet0" ]]; then
    _VMFAMILY="VZ"
  elif [ -e "/proc/bean_counters" ]; then
    _VMFAMILY="VZ"
  elif [[ "${_THISHOST}" =~ ".host8." ]] && [ -e "/boot/grub/menu.lst" ]; then
    _VMFAMILY="TG"
  elif [[ "${_THISHOST}" =~ ".host8." ]] && [ -e "/boot/grub/grub.cfg" ]; then
    _VMFAMILY="TG"
  else
    _VMFAMILY="XEN"
  fi
  if [[ "${_VM_TEST}" =~ beng ]]; then
    _VMFAMILY="VS"
  fi
  if [[ "${_AWS_TEST_A}" =~ "cloudimg" ]] \
    || [[ "${_AWS_TEST_B}" =~ "cloudconfig" ]]; then
    _VMFAMILY="AWS"
  fi
  _RAM=$(free -mto | grep Mem: | awk '{ print $2 }' 2>&1)
  if [ "${_RESERVED_RAM}" -gt "0" ]; then
    _RAM=$(( _RAM - _RESERVED_RAM ))
  fi
  _USE=$(( _RAM / 4 ))
  if [ "${_USE}" -ge "512" ] && [ "${_USE}" -lt "1024" ]; then
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
      _L_PHP_FPM_WORKERS=12
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
  elif [ "${_USE}" -ge "1024" ]; then
    if [ "${_VMFAMILY}" = "XEN" ] || [ "${_VMFAMILY}" = "AWS" ]; then
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
        _L_PHP_FPM_WORKERS=24
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
    elif [ "${_VMFAMILY}" = "VS" ] || [ "${_VMFAMILY}" = "TG" ]; then
      if [ -e "/boot/grub/grub.cfg" ] \
        || [ -e "/boot/grub/menu.lst" ] \
        || [ -e "/root/.tg.cnf" ]; then
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
          _L_PHP_FPM_WORKERS=24
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
      else
        if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
          _L_PHP_FPM_WORKERS=6
        else
          _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
        fi
      fi
    else
      if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
        _L_PHP_FPM_WORKERS=12
      else
        _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
      fi
    fi
  else
    if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
      _L_PHP_FPM_WORKERS=6
    else
      _L_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}
    fi
  fi
}
#
# Update web user.
update_web_user() {
  _T_HD="/home/${_WEB}/.drush"
  _T_TP="/home/${_WEB}/.tmp"
  _T_II="${_T_HD}/php.ini"
  ### msg "DEBUG: ${_WEB} in update_web_user A"
  if [ -e "/home/${_WEB}" ]; then
    mkdir -p /home/${_WEB}/.{tmp,drush}
    ### msg "DEBUG: ${_WEB} in update_web_user B"
    ### msg "DEBUG: ARG1 is $1 in update_web_user B"
    if [ ! -z "$1" ]; then
      if [ "$1" = "hhvm" ]; then
        if [ -e "/opt/php56/etc/php56.ini" ]; then
          _T_PV=56
        elif [ -e "/opt/php55/etc/php55.ini" ]; then
          _T_PV=55
        fi
      else
        _T_PV=$1
        ### msg "DEBUG: _T_PV is ${_T_PV} in update_web_user C"
      fi
    fi
    if [ ! -z "${_T_PV}" ] && [ -e "/opt/php${_T_PV}/etc/php${_T_PV}.ini" ]; then
      cp -af /opt/php${_T_PV}/etc/php${_T_PV}.ini ${_T_II}
      ### msg "DEBUG: _T_PV is ${_T_PV} in update_web_user D"
    else
      if [ -e "/opt/php55/etc/php55.ini" ]; then
        cp -af /opt/php55/etc/php55.ini ${_T_II}
        _T_PV=55
      elif [ -e "/opt/php56/etc/php56.ini" ]; then
        cp -af /opt/php56/etc/php56.ini ${_T_II}
        _T_PV=56
      elif [ -e "/opt/php54/etc/php54.ini" ]; then
        cp -af /opt/php54/etc/php54.ini ${_T_II}
        _T_PV=54
      elif [ -e "/opt/php53/etc/php53.ini" ]; then
        cp -af /opt/php53/etc/php53.ini ${_T_II}
        _T_PV=53
      fi
    fi
    if [ -e "${_T_II}" ]; then
      _INI="open_basedir = \".: \
        /data/all:      \
        /data/conf:     \
        /data/disk/all: \
        /mnt:           \
        /opt/php53:     \
        /opt/php54:     \
        /opt/php55:     \
        /opt/php56:     \
        /opt/tika:      \
        /opt/tika7:     \
        /opt/tika8:     \
        /opt/tika9:     \
        /srv:           \
        /usr/bin:       \
        /var/second/${_USER}:    \
        ${_ROOT}/aegir:          \
        ${_ROOT}/backup-exports: \
        ${_ROOT}/distro:         \
        ${_ROOT}/platforms:      \
        ${_ROOT}/static:         \
        ${_T_HD}:                \
        ${_T_TP}\""
      _INI=$(echo "${_INI}" | sed "s/ //g" 2>&1)
      _INI=$(echo "${_INI}" | sed "s/open_basedir=/open_basedir = /g" 2>&1)
      _INI=${_INI//\//\\\/}
      _QTP=${_T_TP//\//\\\/}
      sed -i "s/.*open_basedir =.*/${_INI}/g"                              ${_T_II}
      sed -i "s/.*session.save_path =.*/session.save_path = ${_QTP}/g"     ${_T_II}
      sed -i "s/.*soap.wsdl_cache_dir =.*/soap.wsdl_cache_dir = ${_QTP}/g" ${_T_II}
      sed -i "s/.*sys_temp_dir =.*/sys_temp_dir = ${_QTP}/g"               ${_T_II}
      sed -i "s/.*upload_tmp_dir =.*/upload_tmp_dir = ${_QTP}/g"           ${_T_II}
      rm -f ${_T_HD}/.ctrl.php*
      echo > ${_T_HD}/.ctrl.php${_T_PV}.txt
    fi
    chmod 700 /home/${_WEB}
    chown -R ${_WEB}:www-data /home/${_WEB}
    chmod 550 /home/${_WEB}/.drush
    chmod 440 /home/${_WEB}/.drush/php.ini
    chattr +i /home/${_WEB} &> /dev/null
    chattr +i /home/${_WEB}/.drush &> /dev/null
  fi
}
#
# Remove web user.
remove_web_user() {
  if [ -e "/home/${_WEB}/.tmp" ] || [ "$1" = "clean" ]; then
    chattr -i /home/${_WEB} &> /dev/null
    chattr -i /home/${_WEB}/.drush &> /dev/null
    mkdir -p ${vBs}/zombie/deleted
    deluser --remove-home --backup-to ${vBs}/zombie/deleted ${_WEB} &> /dev/null
    if [ -e "/home/${_WEB}" ]; then
      rm -f -r /home/${_WEB} &> /dev/null
    fi
  fi
}
#
# Add web user.
create_web_user() {
  _T_HD="/home/${_WEB}/.drush"
  _T_II="${_T_HD}/php.ini"
  _T_ID_EXISTS=$(getent passwd ${_WEB} 2>&1)
  if [ ! -z "${_T_ID_EXISTS}" ] && [ -e "${_T_II}" ]; then
    ### msg "DEBUG: ARG1 is $1 in create_web_user B"
    update_web_user "$1"
  elif [ -z "${_T_ID_EXISTS}" ] || [ ! -e "${_T_II}" ]; then
    ### msg "DEBUG: ARG1 is $1 in create_web_user C"
    remove_web_user "clean"
    adduser --force-badname --system --ingroup www-data ${_WEB} &> /dev/null
    update_web_user "$1"
  fi
}
#
# Tune FPM configuration.
tune_fpm_config() {
  tune_fpm_workers
  _LIM_FPM="${_L_PHP_FPM_WORKERS}"
  if [ "$_LIM_FPM" -lt "24" ]; then
    if [[ "${_THISHOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
      _LIM_FPM=24
    fi
  fi
  if [ "${_CLIENT_OPTION}" = "MICRO" ]; then
    _LIM_FPM=2
    _PHP_FPM_WORKERS=4
  fi
  _CHILD_MAX_FPM=$(( _LIM_FPM * 2 ))
  if [ "${_PHP_FPM_WORKERS}" = "AUTO" ]; then
    _DO_NOTHING=YES
  else
    _PHP_FPM_WORKERS=${_PHP_FPM_WORKERS//[^0-9]/}
    if [ ! -z "${_PHP_FPM_WORKERS}" ] && [ "${_PHP_FPM_WORKERS}" -gt "0" ]; then
      _CHILD_MAX_FPM="${_PHP_FPM_WORKERS}"
    fi
  fi
  _PHP_SV=${_PHP_FPM_VERSION//[^0-9]/}
  if [ -z "${_PHP_SV}" ]; then
    _PHP_SV=55
  fi
  if [ -e "/opt/php55/etc/pool.d/${_USER}.conf" ]; then
    _PHP_OLD_SV=55
  elif [ -e "/opt/php56/etc/pool.d/${_USER}.conf" ]; then
    _PHP_OLD_SV=56
  elif [ -e "/opt/php54/etc/pool.d/${_USER}.conf" ]; then
    _PHP_OLD_SV=54
  elif [ -e "/opt/php53/etc/pool.d/${_USER}.conf" ]; then
    _PHP_OLD_SV=53
  else
    _PHP_OLD_SV=""
  fi
  if [ "${_PHP_FPM_TIMEOUT}" = "AUTO" ] || [ -z "${_PHP_FPM_TIMEOUT}" ]; then
    _PHP_FPM_TIMEOUT=180
  fi
  _PHP_FPM_TIMEOUT=${_PHP_FPM_TIMEOUT//[^0-9]/}
  if [ "${_PHP_FPM_TIMEOUT}" -lt "60" ]; then
    _PHP_FPM_TIMEOUT=60
  fi
  if [ ! -e "/var/xdrago/conf/fpm-pool-foo.conf" ]; then
    mkdir -p /var/xdrago/conf
  fi
  cp -af ${bldPth}/aegir/conf/fpm-pool-foo.conf \
    /var/xdrago/conf/fpm-pool-foo.conf
  if [ ! -z "${_PHP_FPM_TIMEOUT}" ] && [ ! -z "${_PHP_SV}" ]; then
    if [ -e "/var/xdrago/conf/fpm-pool-foo.conf" ]; then
      rm -f /opt/php*/etc/pool.d/${_USER}.conf
      cp -af /var/xdrago/conf/fpm-pool-foo.conf \
        /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf
    fi
    if [ -e "/opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf" ]; then
      ### create or update special system user if needed
      if [ -e "/home/${_WEB}/.drush/php.ini" ]; then
        _OLD_PHP_IN_USE=$(grep "/lib/php" /home/${_WEB}/.drush/php.ini 2>&1)
        _PHP_V="56 55 54 53"
        for e in ${_PHP_V}; do
          if [[ "${_OLD_PHP_IN_USE}" =~ "php${e}" ]]; then
            if [ "${e}" != "${_PHP_SV}" ] \
              || [ ! -e "/home/${_WEB}/.drush/.ctrl.php${_PHP_SV}.txt" ]; then
              update_web_user "${_PHP_SV}"
            fi
          fi
        done
      else
        ### msg "DEBUG: _PHP_SV is ${_PHP_SV} in create_web_user A"
        create_web_user "${_PHP_SV}"
      fi
      ### create or update special system user if needed
      sed -i "s/.ftp/.web/g" \
        /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf &> /dev/null
      sed -i "s/\/data\/disk\/foo\/.tmp/\/home\/foo.web\/.tmp/g" \
        /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf &> /dev/null
      sed -i "s/foo/${_USER}/g" \
        /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf &> /dev/null
      if [ ! -z "${_PHP_FPM_DENY}" ]; then
        sed -i "s/passthru,/${_PHP_FPM_DENY},/g" \
          /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf &> /dev/null
      fi
    fi
    _PHP_TO="${_PHP_FPM_TIMEOUT}s"
    sed -i "s/180s/${_PHP_TO}/g" \
      /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf &> /dev/null
    if [ ! -z "${_CHILD_MAX_FPM}" ]; then
      sed -i "s/pm.max_children =.*/pm.max_children = ${_CHILD_MAX_FPM}/g" \
        /opt/php${_PHP_SV}/etc/pool.d/${_USER}.conf &> /dev/null
    fi
    if [ ! -d "${_ROOT}/tmp" ]; then
      mkdir -p ${_ROOT}/tmp
      chown ${_USER}:users ${_ROOT}/tmp &> /dev/null
    fi
    if [ ! -z "${_PHP_OLD_SV}" ] \
      && [ -e "/etc/init.d/php${_PHP_OLD_SV}-fpm" ]; then
      mrun "service php${_PHP_OLD_SV}-fpm reload" &> /dev/null
    fi
    if [ -e "/etc/init.d/php${_PHP_SV}-fpm" ]; then
      mrun "service php${_PHP_SV}-fpm reload" &> /dev/null
    fi
  fi
}
#
# Make sure that username is unique and not restricted.
check_id() {
  _ID_EXISTS=$(getent passwd ${_USER} 2>&1)
  if [ -z "${_ID_EXISTS}" ]; then
    _DO_NOTHING=YES
  elif [[ "${_ID_EXISTS}" =~ "${_USER}" ]]; then
    msg "ERROR: ${_USER} username is already taken"
    msg "Please choose different _USER"
    clean_pid_exit
  else
    msg "ERROR: ${_USER} username check failed"
    msg "Please try different _USER"
    clean_pid_exit
  fi
  if [ "${_USER}" = "admin" ] \
    || [ "${_USER}" = "hostmaster" ] \
    || [ "${_USER}" = "barracuda" ] \
    || [ "${_USER}" = "octopus" ] \
    || [ "${_USER}" = "boa" ] \
    || [ "${_USER}" = "all" ]; then
    msg "ERROR: ${_USER} is a restricted username"
    msg "ERROR: Please choose a different _USER"
    clean_pid_exit
  elif [[ "${_USER}" =~ "drupal" ]] \
    || [[ "${_USER}" =~ "drush" ]] \
    || [[ "${_USER}" =~ "sites" ]] \
    || [[ "${_USER}" =~ "default" ]]; then
    msg "ERROR: ${_USER} includes restricted keyword"
    msg "ERROR: Please choose a different _USER"
    clean_pid_exit
  fi
  _REGEX="^[[:digit:]]"
  if [[ "${_USER}" =~ "$_REGEX" ]]; then
    msg "ERROR: ${_USER} is a wrong username"
    msg "ERROR: The correct username should start with a letter, not digit"
    clean_pid_exit
  fi
}
#
# Enable chattr.
enable_chattr() {
  if [ ! -z "$1" ] && [ -d "/home/$1" ]; then
    chattr +i /home/$1/platforms    &> /dev/null
    chattr +i /home/$1/platforms/*  &> /dev/null
    if [ -d "/home/$1/.bazaar" ]; then
      chattr +i /home/$1/.bazaar    &> /dev/null
    fi
    chattr +i /home/$1/.drush       &> /dev/null
    chattr +i /home/$1/.drush/usr   &> /dev/null
    chattr +i /home/$1/.drush/*.ini &> /dev/null
  fi
}
#
# Disable chattr.
disable_chattr() {
  if [ ! -z "$1" ] && [ -d "/home/$1" ]; then
    chattr -i /home/$1/platforms    &> /dev/null
    chattr -i /home/$1/platforms/*  &> /dev/null
    if [ -d "/home/$1/.bazaar" ]; then
      chattr -i /home/$1/.bazaar    &> /dev/null
    fi
    chattr -i /home/$1/.drush       &> /dev/null
    chattr -i /home/$1/.drush/usr   &> /dev/null
    chattr -i /home/$1/.drush/*.ini &> /dev/null
  fi
}
#
# Find correct IP.
find_correct_ip() {
  _LOC_IP=$(echo $(getent ahostsv4 $_LOC_DOM) \
    | cut -d: -f2 \
    | awk '{ print $1}' 2>&1)
}
#
# Check repo status.
check_git_repos_status() {
  _GITHUB_WORKS=NO
  _GITORIOUS_WORKS=NO
  if [ "${_FORCE_GIT_MIRROR}" = "drupal" ]; then
    _FORCE_GIT_MIRROR=github
  fi
  if [ "${_FORCE_GIT_MIRROR}" = "github" ]; then
    msg "INFO: We will use forced GitHub repository without testing connection"
    _GITHUB_WORKS=YES
    _GITORIOUS_WORKS=NO
    sleep 1
  elif [ "${_FORCE_GIT_MIRROR}" = "gitorious" ]; then
    msg "INFO: We will use forced Gitorious mirror without testing connection"
    _GITHUB_WORKS=NO
    _GITORIOUS_WORKS=YES
    sleep 1
  else
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: Testing repository mirror servers availability..."
    fi
    sleep 1
    _GITHUB_WORKS=YES
    _GITORIOUS_WORKS=YES
    if ! netcat -w 14 -z github.com 9418 ; then
      _GITHUB_WORKS=NO
      msg "WARN: The GitHub master repository server doesn't respond..."
    elif ! netcat -w 14 -z code.aegir.cc 9418 ; then
      _GITORIOUS_WORKS=NO
      msg "WARN: The Gitorious mirror repository server doesn't respond..."
    fi
  fi
  if [ "$_GITHUB_WORKS" = "YES" ]; then
    _BOA_REPO_NAME="boa"
    _BOA_REPO_GIT_URL="${gitHub}"
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: GitHub master repository will be used"
    fi
  elif [ "$_GITORIOUS_WORKS" = "YES" ]; then
    _BOA_REPO_NAME="barracuda-octopus"
    _BOA_REPO_GIT_URL="git://code.aegir.cc/aegir"
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: Gitorious mirror repository will be used"
    fi
  else
    cat <<EOF

    None of repository servers responded in 8 seconds,
    so we can't continue this installation.

    Please try again later or check if your firewall has port 9418 open.

    Bye.

EOF
    clean_pid_exit
  fi
  _BOA_REPO_GIT_URLX=${_BOA_REPO_GIT_URL//\//\\\/}
}
#
# Read or create Octopus cnf file.
octopus_cnf() {
  if [ ! -e "${octCnf}" ]; then
    if [[ "${_MY_EMAIL}" =~ "omega8.cc" ]] \
      || [[ "${_CLIENT_EMAIL}" =~ "omega8.cc" ]]; then
      _CHECK_HOST=$(uname -n 2>&1)
      if [ -e "/root/.auto.up.cnf" ] \
        || [ -e "/root/.host8.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [ "${_VMFAMILY}" = "VS" ]; then
        _DO_NOTHING=YES
      else
        msg "EXIT: You must enter **your** valid e-mail address"
        msg "EXIT: in the _MY_EMAIL **and** _CLIENT_EMAIL variables"
        clean_pid_exit
      fi
    fi
    msg "INFO: Creating your ${octCnf} config file"
    sleep 1
    echo "###"                                                   > ${octCnf}
    echo "### Configuration created on ${_NOW} with"            >> ${octCnf}
    echo "### Octopus version ${_X_VERSION}"                    >> ${octCnf}
    echo "###"                                                  >> ${octCnf}
    echo "_USER=\"${_USER}\""                                   >> ${octCnf}
    echo "_MY_EMAIL=\"${_MY_EMAIL}\""                           >> ${octCnf}
    echo "_PLATFORMS_LIST=\"${_PLATFORMS_LIST}\""               >> ${octCnf}
    echo "_AUTOPILOT=${_AUTOPILOT}"                             >> ${octCnf}
    echo "_HM_ONLY=${_HM_ONLY}"                                 >> ${octCnf}
    echo "_DEBUG_MODE=${_DEBUG_MODE}"                           >> ${octCnf}
    echo "_MY_OWNIP=${_MY_OWNIP}"                               >> ${octCnf}
    echo "_FORCE_GIT_MIRROR=\"${_FORCE_GIT_MIRROR}\""           >> ${octCnf}
    echo "_THIS_DB_HOST=${_THIS_DB_HOST}"                       >> ${octCnf}
    echo "_DNS_SETUP_TEST=${_DNS_SETUP_TEST}"                   >> ${octCnf}
    echo "_HOT_SAUCE=${_HOT_SAUCE}"                             >> ${octCnf}
    echo "_USE_CURRENT=${_USE_CURRENT}"                         >> ${octCnf}
    echo "_DEL_OLD_EMPTY_PLATFORMS=${_DEL_OLD_EMPTY_PLATFORMS}" >> ${octCnf}
    echo "_DEL_OLD_BACKUPS=${_DEL_OLD_BACKUPS}"                 >> ${octCnf}
    echo "_DEL_OLD_TMP=${_DEL_OLD_TMP}"                         >> ${octCnf}
    echo "_LOCAL_NETWORK_IP=${_LOCAL_NETWORK_IP}"               >> ${octCnf}
    echo "_PHP_FPM_VERSION=${_PHP_FPM_VERSION}"                 >> ${octCnf}
    echo "_PHP_CLI_VERSION=${_PHP_CLI_VERSION}"                 >> ${octCnf}
    echo "_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}"                 >> ${octCnf}
    echo "_PHP_FPM_TIMEOUT=${_PHP_FPM_TIMEOUT}"                 >> ${octCnf}
    echo "_PHP_FPM_DENY=\"${_PHP_FPM_DENY}\""                   >> ${octCnf}
    echo "_STRONG_PASSWORDS=${_STRONG_PASSWORDS}"               >> ${octCnf}
    echo "_SQL_CONVERT=${_SQL_CONVERT}"                         >> ${octCnf}
    echo "_RESERVED_RAM=${_RESERVED_RAM}"                       >> ${octCnf}
    echo "###"                                                  >> ${octCnf}
    echo "_DOMAIN=\"${_DOMAIN}\""                               >> ${octCnf}
    echo "_CLIENT_EMAIL=\"${_CLIENT_EMAIL}\""                   >> ${octCnf}
    echo "_CLIENT_OPTION=\"${_CLIENT_OPTION}\""                 >> ${octCnf}
    echo "_CLIENT_SUBSCR=\"${_CLIENT_SUBSCR}\""                 >> ${octCnf}
    echo "_CLIENT_CORES=\"${_CLIENT_CORES}\""                   >> ${octCnf}
    echo "###"                                                  >> ${octCnf}
  else
    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "INFO: Reading your ${octCnf} config file"
    fi
    sleep 1
    _PHP_FPM_WORKERS_TEST=$(grep _PHP_FPM_WORKERS ${octCnf} 2>&1)
    if [[ "${_PHP_FPM_WORKERS_TEST}" =~ "_PHP_FPM_WORKERS" ]]; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_WORKERS=${_PHP_FPM_WORKERS}" >> ${octCnf}
    fi
    _PHP_FPM_TIMEOUT_TEST=$(grep _PHP_FPM_TIMEOUT ${octCnf} 2>&1)
    if [[ "${_PHP_FPM_TIMEOUT_TEST}" =~ "_PHP_FPM_TIMEOUT" ]]; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_TIMEOUT=${_PHP_FPM_TIMEOUT}" >> ${octCnf}
    fi
    _PHP_FPM_DENY_TEST=$(grep _PHP_FPM_DENY ${octCnf} 2>&1)
    if [[ "${_PHP_FPM_DENY_TEST}" =~ "_PHP_FPM_DENY" ]]; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_DENY=\"${_PHP_FPM_DENY}\"" >> ${octCnf}
    fi
     _RESERVED_RAM_TEST=$(grep _RESERVED_RAM ${octCnf} 2>&1)
    if [[ "${_RESERVED_RAM_TEST}" =~ "_RESERVED_RAM" ]]; then
      _DO_NOTHING=YES
    else
      echo "_RESERVED_RAM=${_RESERVED_RAM}" >> ${octCnf}
    fi
    _PHP_FPM_VERSION_TEST=$(grep _PHP_FPM_VERSION ${octCnf} 2>&1)
    if [[ "${_PHP_FPM_VERSION_TEST}" =~ "_PHP_FPM_VERSION" ]]; then
      _DO_NOTHING=YES
    else
      echo "_PHP_FPM_VERSION=${_PHP_FPM_VERSION}" >> ${octCnf}
    fi
    _PHP_CLI_VERSION_TEST=$(grep _PHP_CLI_VERSION ${octCnf} 2>&1)
    if [[ "${_PHP_CLI_VERSION_TEST}" =~ "_PHP_CLI_VERSION" ]]; then
      _DO_NOTHING=YES
    else
      echo "_PHP_CLI_VERSION=${_PHP_CLI_VERSION}" >> ${octCnf}
    fi
    _CHECK_HOST=$(uname -n 2>&1)
    if [[ "${_CHECK_HOST}" =~ ".host8." ]] || [ "${_VMFAMILY}" = "VS" ]; then
      _LD_DOM=YES
    else
      _LD_DOM=NO
    fi
    if [ -e "${_ROOT}/static/control/fpm.info" ]; then
      _PHP_FPM_VERSION=$(cat ${_ROOT}/static/control/fpm.info 2>&1)
      _PHP_FPM_VERSION=$(echo -n ${_PHP_FPM_VERSION} | tr -d "\n" 2>&1)
      if [ "${_PHP_FPM_VERSION}" = "5.6" ] \
        || [ "${_PHP_FPM_VERSION}" = "5.5" ] \
        || [ "${_PHP_FPM_VERSION}" = "5.4" ] \
        || [ "${_PHP_FPM_VERSION}" = "5.3" ]; then
        if [ "${_PHP_FPM_VERSION}" = "5.5" ] \
          && [ ! -x "/opt/php55/bin/php" ]; then
          if [ -x "/opt/php56/bin/php" ]; then
            _PHP_FPM_VERSION=5.6
          elif [ -x "/opt/php54/bin/php" ]; then
            _PHP_FPM_VERSION=5.4
          elif [ -x "/opt/php53/bin/php" ]; then
            _PHP_FPM_VERSION=5.3
          fi
        elif [ "${_PHP_FPM_VERSION}" = "5.6" ] \
          && [ ! -x "/opt/php56/bin/php" ]; then
          if [ -x "/opt/php55/bin/php" ]; then
            _PHP_FPM_VERSION=5.5
          elif [ -x "/opt/php54/bin/php" ]; then
            _PHP_FPM_VERSION=5.4
          elif [ -x "/opt/php53/bin/php" ]; then
            _PHP_FPM_VERSION=5.3
          fi
        elif [ "${_PHP_FPM_VERSION}" = "5.4" ] \
          && [ ! -x "/opt/php54/bin/php" ]; then
          if [ -x "/opt/php55/bin/php" ]; then
            _PHP_FPM_VERSION=5.5
          elif [ -x "/opt/php56/bin/php" ]; then
            _PHP_FPM_VERSION=5.6
          elif [ -x "/opt/php53/bin/php" ]; then
            _PHP_FPM_VERSION=5.3
          fi
        elif [ "${_PHP_FPM_VERSION}" = "5.3" ] \
          && [ ! -x "/opt/php53/bin/php" ]; then
          if [ -x "/opt/php55/bin/php" ]; then
            _PHP_FPM_VERSION=5.5
          elif [ -x "/opt/php56/bin/php" ]; then
            _PHP_FPM_VERSION=5.6
          elif [ -x "/opt/php54/bin/php" ]; then
            _PHP_FPM_VERSION=5.4
          fi
        fi
        sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${_PHP_FPM_VERSION}/g" \
          ${octCnf} &> /dev/null
        echo ${_PHP_FPM_VERSION} > ${_ROOT}/log/fpm.txt
        echo ${_PHP_FPM_VERSION} > ${_ROOT}/static/control/fpm.info
        chown ${_USER}.ftp:users ${_ROOT}/static/control/fpm.info
      fi
    else
      if [ -e "${_ROOT}/log/fpm.txt" ] \
        && [ "${_LD_DOM}" = "YES" ]; then
        _PHP_FPM_VERSION=$(cat ${_ROOT}/log/fpm.txt 2>&1)
        _PHP_FPM_VERSION=$(echo -n ${_PHP_FPM_VERSION} | tr -d "\n" 2>&1)
        if [ "${_PHP_FPM_VERSION}" = "5.6" ] \
          || [ "${_PHP_FPM_VERSION}" = "5.5" ] \
          || [ "${_PHP_FPM_VERSION}" = "5.4" ] \
          || [ "${_PHP_FPM_VERSION}" = "5.3" ]; then
          if [ "${_PHP_FPM_VERSION}" = "5.5" ] \
            && [ ! -x "/opt/php55/bin/php" ]; then
            if [ -x "/opt/php56/bin/php" ]; then
              _PHP_FPM_VERSION=5.6
            elif [ -x "/opt/php54/bin/php" ]; then
              _PHP_FPM_VERSION=5.4
            elif [ -x "/opt/php53/bin/php" ]; then
              _PHP_FPM_VERSION=5.3
            fi
          elif [ "${_PHP_FPM_VERSION}" = "5.6" ] \
            && [ ! -x "/opt/php56/bin/php" ]; then
            if [ -x "/opt/php55/bin/php" ]; then
              _PHP_FPM_VERSION=5.5
            elif [ -x "/opt/php54/bin/php" ]; then
              _PHP_FPM_VERSION=5.4
            elif [ -x "/opt/php53/bin/php" ]; then
              _PHP_FPM_VERSION=5.3
            fi
          elif [ "${_PHP_FPM_VERSION}" = "5.4" ] \
            && [ ! -x "/opt/php54/bin/php" ]; then
            if [ -x "/opt/php55/bin/php" ]; then
              _PHP_FPM_VERSION=5.5
            elif [ -x "/opt/php56/bin/php" ]; then
              _PHP_FPM_VERSION=5.6
            elif [ -x "/opt/php53/bin/php" ]; then
              _PHP_FPM_VERSION=5.3
            fi
          elif [ "${_PHP_FPM_VERSION}" = "5.3" ] \
            && [ ! -x "/opt/php53/bin/php" ]; then
            if [ -x "/opt/php55/bin/php" ]; then
              _PHP_FPM_VERSION=5.5
            elif [ -x "/opt/php56/bin/php" ]; then
              _PHP_FPM_VERSION=5.6
            elif [ -x "/opt/php54/bin/php" ]; then
              _PHP_FPM_VERSION=5.4
            fi
          fi
          sed -i "s/^_PHP_FPM_VERSION=.*/_PHP_FPM_VERSION=${_PHP_FPM_VERSION}/g" \
            ${octCnf} &> /dev/null
        fi
      fi
    fi
    if [ -e "${_ROOT}/static/control/cli.info" ]; then
      _PHP_CLI_VERSION=$(cat ${_ROOT}/static/control/cli.info 2>&1)
      _PHP_CLI_VERSION=$(echo -n ${_PHP_CLI_VERSION} | tr -d "\n" 2>&1)
      if [ "${_PHP_CLI_VERSION}" = "5.6" ] \
        || [ "${_PHP_CLI_VERSION}" = "5.5" ] \
        || [ "${_PHP_CLI_VERSION}" = "5.4" ] \
        || [ "${_PHP_CLI_VERSION}" = "5.3" ]; then
        if [ "${_PHP_CLI_VERSION}" = "5.5" ] \
          && [ ! -x "/opt/php55/bin/php" ]; then
          if [ -x "/opt/php56/bin/php" ]; then
            _PHP_CLI_VERSION=5.6
          elif [ -x "/opt/php54/bin/php" ]; then
            _PHP_CLI_VERSION=5.4
          elif [ -x "/opt/php53/bin/php" ]; then
            _PHP_CLI_VERSION=5.3
          fi
        elif [ "${_PHP_CLI_VERSION}" = "5.6" ] \
          && [ ! -x "/opt/php56/bin/php" ]; then
          if [ -x "/opt/php55/bin/php" ]; then
            _PHP_CLI_VERSION=5.5
          elif [ -x "/opt/php54/bin/php" ]; then
            _PHP_CLI_VERSION=5.4
          elif [ -x "/opt/php53/bin/php" ]; then
            _PHP_CLI_VERSION=5.3
          fi
        elif [ "${_PHP_CLI_VERSION}" = "5.4" ] \
          && [ ! -x "/opt/php54/bin/php" ]; then
          if [ -x "/opt/php55/bin/php" ]; then
            _PHP_CLI_VERSION=5.5
          elif [ -x "/opt/php56/bin/php" ]; then
            _PHP_CLI_VERSION=5.6
          elif [ -x "/opt/php53/bin/php" ]; then
            _PHP_CLI_VERSION=5.3
          fi
        elif [ "${_PHP_CLI_VERSION}" = "5.3" ] \
          && [ ! -x "/opt/php53/bin/php" ]; then
          if [ -x "/opt/php55/bin/php" ]; then
            _PHP_CLI_VERSION=5.5
          elif [ -x "/opt/php56/bin/php" ]; then
            _PHP_CLI_VERSION=5.6
          elif [ -x "/opt/php54/bin/php" ]; then
            _PHP_CLI_VERSION=5.4
          fi
        fi
        sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${_PHP_CLI_VERSION}/g" \
          ${octCnf} &> /dev/null
        echo ${_PHP_CLI_VERSION} > ${_ROOT}/log/cli.txt
        echo ${_PHP_CLI_VERSION} > ${_ROOT}/static/control/cli.info
        chown ${_USER}.ftp:users ${_ROOT}/static/control/cli.info
      fi
    else
      if [ -e "${_ROOT}/log/cli.txt" ] \
        && [ "${_LD_DOM}" = "YES" ]; then
        _PHP_CLI_VERSION=$(cat ${_ROOT}/log/cli.txt 2>&1)
        _PHP_CLI_VERSION=$(echo -n ${_PHP_CLI_VERSION} | tr -d "\n" 2>&1)
        if [ "${_PHP_CLI_VERSION}" = "5.6" ] \
          || [ "${_PHP_CLI_VERSION}" = "5.5" ] \
          || [ "${_PHP_CLI_VERSION}" = "5.4" ] \
          || [ "${_PHP_CLI_VERSION}" = "5.3" ]; then
          if [ "${_PHP_CLI_VERSION}" = "5.5" ] \
            && [ ! -x "/opt/php55/bin/php" ]; then
            if [ -x "/opt/php56/bin/php" ]; then
              _PHP_CLI_VERSION=5.6
            elif [ -x "/opt/php54/bin/php" ]; then
              _PHP_CLI_VERSION=5.4
            elif [ -x "/opt/php53/bin/php" ]; then
              _PHP_CLI_VERSION=5.3
            fi
          elif [ "${_PHP_CLI_VERSION}" = "5.6" ] \
            && [ ! -x "/opt/php56/bin/php" ]; then
            if [ -x "/opt/php55/bin/php" ]; then
              _PHP_CLI_VERSION=5.5
            elif [ -x "/opt/php54/bin/php" ]; then
              _PHP_CLI_VERSION=5.4
            elif [ -x "/opt/php53/bin/php" ]; then
              _PHP_CLI_VERSION=5.3
            fi
          elif [ "${_PHP_CLI_VERSION}" = "5.4" ] \
            && [ ! -x "/opt/php54/bin/php" ]; then
            if [ -x "/opt/php55/bin/php" ]; then
              _PHP_CLI_VERSION=5.5
            elif [ -x "/opt/php56/bin/php" ]; then
              _PHP_CLI_VERSION=5.6
            elif [ -x "/opt/php53/bin/php" ]; then
              _PHP_CLI_VERSION=5.3
            fi
          elif [ "${_PHP_CLI_VERSION}" = "5.3" ] \
            && [ ! -x "/opt/php53/bin/php" ]; then
            if [ -x "/opt/php55/bin/php" ]; then
              _PHP_CLI_VERSION=5.5
            elif [ -x "/opt/php56/bin/php" ]; then
              _PHP_CLI_VERSION=5.6
            elif [ -x "/opt/php54/bin/php" ]; then
              _PHP_CLI_VERSION=5.4
            fi
          fi
          sed -i "s/^_PHP_CLI_VERSION=.*/_PHP_CLI_VERSION=${_PHP_CLI_VERSION}/g" \
            ${octCnf} &> /dev/null
        fi
      fi
    fi

    _O_CONTRIB_UP_TEST=$(grep _O_CONTRIB_UP ${octCnf} 2>&1)
    if [[ "$_O_CONTRIB_UP_TEST" =~ "_O_CONTRIB_UP" ]]; then
      sed -i "s/^_O_CONTRIB_UP.*//g" ${octCnf} &> /dev/null
      sed -i "/^$/d" ${octCnf} &> /dev/null
    fi

    _ALLOW_UNSUPPORTED_TEST=$(grep _ALLOW_UNSUPPORTED ${octCnf} 2>&1)
    if [[ "$_ALLOW_UNSUPPORTED_TEST" =~ "_ALLOW_UNSUPPORTED" ]]; then
      sed -i "s/^_ALLOW_UNSUPPORTED.*//g" ${octCnf} &> /dev/null
      sed -i "/^$/d" ${octCnf} &> /dev/null
    fi

    _USE_STOCK_TEST=$(grep _USE_STOCK ${octCnf} 2>&1)
    if [[ "${_USE_STOCK_TEST}" =~ "_USE_STOCK" ]]; then
      sed -i "s/^_USE_STOCK.*//g" ${octCnf} &> /dev/null
      sed -i "/^$/d" ${octCnf} &> /dev/null
    fi

    _HTTP_WILDCARD_TEST=$(grep _HTTP_WILDCARD ${octCnf} 2>&1)
    if [[ "$_HTTP_WILDCARD_TEST" =~ "_HTTP_WILDCARD" ]]; then
      sed -i "s/^_HTTP_WILDCARD.*//g" ${octCnf} &> /dev/null
      sed -i "/^$/d" ${octCnf} &> /dev/null
    fi

    _DEL_OLD_EMPTY_PLATFORMS_TEST=$(grep _DEL_OLD_EMPTY_PLATFORMS ${octCnf} 2>&1)
    if [[ "${_DEL_OLD_EMPTY_PLATFORMS_TEST}" =~ "_DEL_OLD_EMPTY_PLATFORMS" ]]; then
      _DO_NOTHING=YES
    else
      echo "_DEL_OLD_EMPTY_PLATFORMS=${_DEL_OLD_EMPTY_PLATFORMS}" >> ${octCnf}
    fi

    _DEL_OLD_BACKUPS_TEST=$(grep _DEL_OLD_BACKUPS ${octCnf} 2>&1)
    if [[ "${_DEL_OLD_BACKUPS_TEST}" =~ "_DEL_OLD_BACKUPS" ]]; then
      _DO_NOTHING=YES
    else
      echo "_DEL_OLD_BACKUPS=${_DEL_OLD_BACKUPS}" >> ${octCnf}
    fi

    _DEL_OLD_TMP_TEST=$(grep _DEL_OLD_TMP ${octCnf} 2>&1)
    if [[ "${_DEL_OLD_TMP_TEST}" =~ "_DEL_OLD_TMP" ]]; then
      _DO_NOTHING=YES
    else
      echo "_DEL_OLD_TMP=${_DEL_OLD_TMP}" >> ${octCnf}
    fi

    if [ "${_LD_DOM}" = "YES" ]; then
      _STRONG_PASSWORDS=YES
    fi
    _STRONG_PASSWORDS_TEST=$(grep _STRONG_PASSWORDS ${octCnf} 2>&1)
    if [[ "${_STRONG_PASSWORDS_TEST}" =~ "_STRONG_PASSWORDS" ]]; then
      _DO_NOTHING=YES
    else
      echo "_STRONG_PASSWORDS=${_STRONG_PASSWORDS}" >> ${octCnf}
    fi

    _SQL_CONVERT_TEST=$(grep _SQL_CONVERT ${octCnf} 2>&1)
    if [[ "${_SQL_CONVERT_TEST}" =~ "_SQL_CONVERT" ]]; then
      _DO_NOTHING=YES
    else
      echo "_SQL_CONVERT=${_SQL_CONVERT}" >> ${octCnf}
    fi

    if [ "${_DEBUG_MODE}" = "YES" ]; then
      msg "NOTE! Please review all config options displayed below"
      sleep 3
      echo " "
      while read line; do
        echo "$line"
      done < ${octCnf}
      echo " "
    fi

    if [ -e "${octCnf}" ]; then
      source ${octCnf}
    fi
    _PRE_PLATFORMS_LIST="${_PLATFORMS_LIST}"
    if [ -e "${_ROOT}/static/control/platforms.info" ]; then
      _PLATFORMS_LIST=$(cat ${_ROOT}/static/control/platforms.info 2>&1)
      _PLATFORMS_LIST=$(echo -n ${_PLATFORMS_LIST} | tr -d "\n" 2>&1)
      _PLATFORMS_LIST=${_PLATFORMS_LIST//[^ 0-9A-Z]/}
      msg "NOTE! Custom Platforms List: ${_PLATFORMS_LIST}"
      if [ -z "${_PLATFORMS_LIST}" ]; then
        _PLATFORMS_LIST="${_PRE_PLATFORMS_LIST}"
        msg "NOTE! Default Platforms List: ${_PLATFORMS_LIST}"
      fi
    fi
    if [[ "${_MY_EMAIL}" =~ "omega8.cc" ]]; then
      if [ -e "/root/.auto.up.cnf" ] \
        || [ -e "/root/.host8.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [ "${_VMFAMILY}" = "VS" ]; then
        _DO_NOTHING=YES
      else
        msg "EXIT: You must enter **your** valid e-mail address in the"
        msg "EXIT: _MY_EMAIL variable in the ${octCnf} file"
        clean_pid_exit
      fi
    fi
    if [ "${_PHP_FPM_VERSION}" = "5.6" ] \
      || [ "${_PHP_CLI_VERSION}" = "5.6" ]; then
      if [ ! -x "/opt/php56/bin/php" ]; then
        if [ -x "/opt/php55/bin/php" ]; then
          _PHP_FPM_VERSION=5.5
          _PHP_CLI_VERSION=5.5
        elif [ -x "/opt/php54/bin/php" ]; then
          _PHP_FPM_VERSION=5.4
          _PHP_CLI_VERSION=5.4
        elif [ -x "/opt/php53/bin/php" ]; then
          _PHP_FPM_VERSION=5.3
          _PHP_CLI_VERSION=5.3
        else
          _PHP_FPM_VERSION=
          _PHP_CLI_VERSION=
        fi
      fi
    elif [ "${_PHP_FPM_VERSION}" = "5.5" ] \
      || [ "${_PHP_CLI_VERSION}" = "5.5" ]; then
      if [ ! -x "/opt/php55/bin/php" ]; then
        if [ -x "/opt/php56/bin/php" ]; then
          _PHP_FPM_VERSION=5.6
          _PHP_CLI_VERSION=5.6
        elif [ -x "/opt/php54/bin/php" ]; then
          _PHP_FPM_VERSION=5.4
          _PHP_CLI_VERSION=5.4
        elif [ -x "/opt/php53/bin/php" ]; then
          _PHP_FPM_VERSION=5.3
          _PHP_CLI_VERSION=5.3
        else
          _PHP_FPM_VERSION=
          _PHP_CLI_VERSION=
        fi
      fi
    elif [ "${_PHP_FPM_VERSION}" = "5.4" ] \
      || [ "${_PHP_CLI_VERSION}" = "5.4" ]; then
      if [ ! -x "/opt/php54/bin/php" ]; then
        if [ -x "/opt/php55/bin/php" ]; then
          _PHP_FPM_VERSION=5.5
          _PHP_CLI_VERSION=5.5
        elif [ -x "/opt/php56/bin/php" ]; then
          _PHP_FPM_VERSION=5.6
          _PHP_CLI_VERSION=5.6
        elif [ -x "/opt/php53/bin/php" ]; then
          _PHP_FPM_VERSION=5.3
          _PHP_CLI_VERSION=5.3
        else
          _PHP_FPM_VERSION=
          _PHP_CLI_VERSION=
        fi
      fi
    elif [ "${_PHP_FPM_VERSION}" = "5.3" ] \
      || [ "${_PHP_CLI_VERSION}" = "5.3" ]; then
      if [ ! -x "/opt/php53/bin/php" ]; then
        if [ -x "/opt/php55/bin/php" ]; then
          _PHP_FPM_VERSION=5.5
          _PHP_CLI_VERSION=5.5
        elif [ -x "/opt/php56/bin/php" ]; then
          _PHP_FPM_VERSION=5.6
          _PHP_CLI_VERSION=5.6
        elif [ -x "/opt/php54/bin/php" ]; then
          _PHP_FPM_VERSION=5.4
          _PHP_CLI_VERSION=5.4
        else
          _PHP_FPM_VERSION=
          _PHP_CLI_VERSION=
        fi
      fi
    elif [ "${_PHP_FPM_VERSION}" = "5.2" ] \
      || [ "${_PHP_CLI_VERSION}" = "5.2" ]; then
      if [ -x "/opt/php55/bin/php" ]; then
        _PHP_FPM_VERSION=5.5
        _PHP_CLI_VERSION=5.5
      elif [ -x "/opt/php56/bin/php" ]; then
        _PHP_FPM_VERSION=5.6
        _PHP_CLI_VERSION=5.6
      elif [ -x "/opt/php54/bin/php" ]; then
        _PHP_FPM_VERSION=5.4
        _PHP_CLI_VERSION=5.4
      elif [ -x "/opt/php53/bin/php" ]; then
        _PHP_FPM_VERSION=5.3
        _PHP_CLI_VERSION=5.3
      else
        _PHP_FPM_VERSION=
        _PHP_CLI_VERSION=
      fi
    else
      _PHP_FPM_VERSION=
      _PHP_CLI_VERSION=
    fi
    if [ -z "${_PHP_FPM_VERSION}" ] || [ -z "${_PHP_CLI_VERSION}" ]; then
      msg "EXIT: You must specify already installed PHP version"
      msg "EXIT: in both _PHP_FPM_VERSION and _PHP_CLI_VERSION"
      clean_pid_exit
    fi
  fi
}
#
# Fix advanced cron IP for cURL requests.
fix_advanced_cron_curl() {
  if [ -e "${_ROOT}/.drush/hostmaster.alias.drushrc.php" ]; then
    _THIS_HM_ROOT=$(cat ${_ROOT}/.drush/hostmaster.alias.drushrc.php \
      | grep "root'" \
      | cut -d: -f2 \
      | awk '{ print $3}' \
      | sed "s/[\,']//g" 2>&1)
    pthA="profiles/hostmaster/modules/hosting_advanced_cron"
    pthB="hosting_advanced_cron.module"
    if [ -e "${_THIS_HM_ROOT}/${pthA}/${pthB}" ]; then
      sed -i "s/127.0.0.1/${_CRON_IP}/g" ${_THIS_HM_ROOT}/${pthA}/${pthB}
    fi
  fi
}
#
# Fix multi-IP cron access.
fix_multi_ip_cron_access() {
  rm -f /root/.local.IP.list.allow
  for _IP in `cat /root/.local.IP.list \
    | cut -d '#' -f1 \
    | sort \
    | uniq \
    | tr -d "\s"`;do echo "  allow        ${_IP};" >> \
      /root/.local.IP.list.allow;done
  echo "  allow        127.0.0.1;" >> /root/.local.IP.list.allow
  echo "  deny         all;" >> /root/.local.IP.list.allow

  sed -i "s/allow        .*;//g; s/ *$//g; /^$/d" \
    ${octTpl}/Inc/vhost_include.tpl.php
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${octTpl}/Inc/vhost_include.tpl.php

  sed -i "s/allow        .*;//g; s/ *$//g; /^$/d" \
    ${octTpl}/subdir.tpl.php
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${octTpl}/subdir.tpl.php

  sed -i "s/allow        .*;//g; s/ *$//g; /^$/d" \
    ${octInc}/nginx_vhost_common.conf
  sed -i '/deny         all;/ {r /root/.local.IP.list.allow
d;};' ${octInc}/nginx_vhost_common.conf
}
#
# Sub Force advanced Nginx configuration.
sub_force_advanced_nginx_config() {
  if [ -d "${octInc}" ]; then
    _PHP_SV=${_PHP_FPM_VERSION//[^0-9]/}
    if [ -z "${_PHP_SV}" ]; then
      _PHP_SV=55
    fi
    if [ -e "/opt/php${_PHP_SV}/etc/php${_PHP_SV}-fpm.conf" ]; then
      sed -i "s/EDIT_USER/${_USER}/g"                                              ${octTpl}/Inc/vhost_include.tpl.php &> /dev/null
      sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_USER}.fpm.socket;/g"             ${octTpl}/Inc/vhost_include.tpl.php &> /dev/null
      sed -i "s/unix:cron:fastcgi.socket;/unix:\/var\/run\/${_USER}.fpm.socket;/g" ${octTpl}/Inc/vhost_include.tpl.php &> /dev/null
      sed -i "s/unix:.*www53.fpm.socket;/unix:\/var\/run\/${_USER}.fpm.socket;/g"  ${octTpl}/Inc/vhost_include.tpl.php &> /dev/null

      sed -i "s/EDIT_USER/${_USER}/g"                                              ${octTpl}/subdir.tpl.php &> /dev/null
      sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_USER}.fpm.socket;/g"             ${octTpl}/subdir.tpl.php &> /dev/null
      sed -i "s/unix:cron:fastcgi.socket;/unix:\/var\/run\/${_USER}.fpm.socket;/g" ${octTpl}/subdir.tpl.php &> /dev/null
      sed -i "s/unix:.*www53.fpm.socket;/unix:\/var\/run\/${_USER}.fpm.socket;/g"  ${octTpl}/subdir.tpl.php &> /dev/null

      sed -i "s/EDIT_USER/${_USER}/g"                                              ${octInc}/nginx_vhost_common.conf &> /dev/null
      sed -i "s/127.0.0.1:.*;/unix:\/var\/run\/${_USER}.fpm.socket;/g"             ${octInc}/nginx_vhost_common.conf &> /dev/null
      sed -i "s/unix:cron:fastcgi.socket;/unix:\/var\/run\/${_USER}.fpm.socket;/g" ${octInc}/nginx_vhost_common.conf &> /dev/null
      sed -i "s/unix:.*www53.fpm.socket;/unix:\/var\/run\/${_USER}.fpm.socket;/g"  ${octInc}/nginx_vhost_common.conf &> /dev/null
    fi
    _CRON_IP=${_THISHTIP//[^0-9.]/}
    if [ ! -e "/root/.local.IP.list" ]; then
      rm -f /root/.tmp.IP.list*
      rm -f /root/.local.IP.list*
      for _IP in `hostname -I`;do echo ${_IP} >> /root/.tmp.IP.list;done
      for _IP in `cat /root/.tmp.IP.list \
        | sort \
        | uniq`;do echo "${_IP} # local IP address" >> /root/.local.IP.list;done
      rm -f /root/.tmp.IP.list*
    fi
    _IP_IF_PRESENT=$(grep "${_CRON_IP}" /root/.local.IP.list 2>&1)
    if [[ "${_IP_IF_PRESENT}" =~ "${_CRON_IP}" ]]; then
      _IP_PRESENT=YES
    else
      _IP_PRESENT=NO
    fi
    if [ ! -z "${_CRON_IP}" ] \
      && [ "${_IP_PRESENT}" = "YES" ] \
      && [ -e "/root/.local.IP.list" ]; then
      fix_multi_ip_cron_access
      fix_advanced_cron_curl
    fi
  fi
}
#
# Force advanced Nginx configuration.
force_advanced_nginx_config() {
  sub_force_advanced_nginx_config
  if [ -e "${_ROOT}/config/includes/nginx_vhost_common.conf" ]; then
    rm -f ${_ROOT}/config/includes/nginx_advanced_include.conf
    rm -f ${_ROOT}/config/includes/nginx_legacy_include.conf
    rm -f ${_ROOT}/config/includes/nginx_modern_include.conf
    rm -f ${_ROOT}/config/includes/nginx_octopus_include.conf
    rm -f ${_ROOT}/config/includes/nginx_simple_include.conf
  fi
}
#
# Action.
action() {
  _OSV=$(lsb_release -sc 2>&1)
  if [ -d "/data/all/000" ]; then
    if [ ! -e "/data/all/000/core-v-${_SMALLCORE6}.txt" ] \
      || [ ! -e "/data/all/000/core-v-${_SMALLCORE7}.txt" ]; then
      _USE_CURRENT=NO
      _HOT_SAUCE=YES
      _HM_ONLY=NO
    fi
  fi
  for fe in `find ${bldPth}/aegir/scripts -type f`; do
    sed -i "s/EDIT_AEGIR_VERSION/${_AEGIR_VERSION}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_AEGIR_XTS_VRN/${_AEGIR_XTS_VRN}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_AGOV/${_AGOV}/g"                           ${fe} &> /dev/null
    sed -i "s/EDIT_ALL_DISTRO/${_ALL_DISTRO}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_AUTOPILOT/${_AUTOPILOT}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_BOA_REPO_GIT_URL/${_BOA_REPO_GIT_URLX}/g"  ${fe} &> /dev/null
    sed -i "s/EDIT_BOA_REPO_NAME/${_BOA_REPO_NAME}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_BRANCH_BOA/${_BRANCH_BOA}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_BRANCH_PRN/${_BRANCH_PRN}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_CIVICRM_M6/${_CIVICRM_M6}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_CIVICRM_M7/${_CIVICRM_M7}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_CLIENT_CORES/${_CLIENT_CORES}/g"           ${fe} &> /dev/null
    sed -i "s/EDIT_CLIENT_EMAIL/${_CLIENT_EMAIL}/g"           ${fe} &> /dev/null
    sed -i "s/EDIT_CLIENT_OPTION/${_CLIENT_OPTION}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_COD/${_COD}/g"                             ${fe} &> /dev/null
    sed -i "s/EDIT_COMMERCE1/${_COMMERCE1}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_COMMERCE2/${_COMMERCE2}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_COMMONS2/${_COMMONS2}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_COMMONS3/${_COMMONS3}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_D8_DEV_COMMIT/${_D8_DEV_COMMIT}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_D8_DEV_LABEL/${_D8_DEV_LABEL}/g"           ${fe} &> /dev/null
    sed -i "s/EDIT_DEBUG_MODE/${_DEBUG_MODE}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_DISTRO/${_DISTRO}/g"                       ${fe} &> /dev/null
    sed -i "s/EDIT_DOMAIN/${_DOMAIN}/g"                       ${fe} &> /dev/null
    sed -i "s/EDIT_DRUPAL7/${_DRUPAL7}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_DRUPAL8/${_DRUPAL8}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_DRUSH_VERSION/${_DRUSH_VERSION}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_ERPAL/${_ERPAL}/g"                         ${fe} &> /dev/null
    sed -i "s/EDIT_GUARDR/${_GUARDR}/g"                       ${fe} &> /dev/null
    sed -i "s/EDIT_HM_DISTRO/${_HM_DISTRO}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_HM_ONLY/${_HM_ONLY}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_HOT_SAUCE/${_HOT_SAUCE}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_LAST_ALL/${_LAST_ALL}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_LAST_HMR/${_LAST_HMR}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_LASTNUM/${_LASTNUM}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_MY_EMAIL/${_MY_EMAIL}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_MY_OWNIP/${_MY_OWNIP}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_NOW/${_NOW}/g"                             ${fe} &> /dev/null
    sed -i "s/EDIT_OPENACADEMY/${_OPENACADEMY}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_OPENATRIUM7/${_OPENATRIUM7}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_OPENBLOG/${_OPENBLOG}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_OPENCHURCH1/${_OPENCHURCH1}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_OPENCHURCH2/${_OPENCHURCH2}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_OPENDEALS/${_OPENDEALS}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_OPENOUTREACH/${_OPENOUTREACH}/g"           ${fe} &> /dev/null
    sed -i "s/EDIT_OPENPUBLIC/${_OPENPUBLIC}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_OPENPUBLISH/${_OPENPUBLISH}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_OPENSCHOLAR/${_OPENSCHOLAR}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_PANOPOLY/${_PANOPOLY}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_PHP_CLI_VERSION/${_PHP_CLI_VERSION}/g"     ${fe} &> /dev/null
    sed -i "s/EDIT_PHP_FPM_VERSION/${_PHP_FPM_VERSION}/g"     ${fe} &> /dev/null
    sed -i "s/EDIT_PLATFORMS_LIST/${_PLATFORMS_LIST}/g"       ${fe} &> /dev/null
    sed -i "s/EDIT_PLATFORMS_ONLY/${_PLATFORMS_ONLY}/g"       ${fe} &> /dev/null
    sed -i "s/EDIT_PURGE_FOR_SEVEN/${_PURGE_FOR_SEVEN}/g"     ${fe} &> /dev/null
    sed -i "s/EDIT_PURGE_MODE/${_PURGE_MODE}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_RECRUITER/${_RECRUITER}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_REDIS_M_VERSION/${_REDIS_M_VERSION}/g"     ${fe} &> /dev/null
    sed -i "s/EDIT_RESTAURANT/${_RESTAURANT}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_SERIES_RESULT/${_SERIES_RESULT}/g"         ${fe} &> /dev/null
    sed -i "s/EDIT_SMALLCORE6/${_SMALLCORE6}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_SMALLCORE7/${_SMALLCORE7}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_SMALLCORE8/${_SMALLCORE8}/g"               ${fe} &> /dev/null
    sed -i "s/EDIT_SPINNER/${_SPINNER}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_STRONG_PASSWORDS/${_STRONG_PASSWORDS}/g"   ${fe} &> /dev/null
    sed -i "s/EDIT_T_BUILD/${_T_BUILD}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_THIS_DB_HOST/${_THIS_DB_HOST}/g"           ${fe} &> /dev/null
    sed -i "s/EDIT_THISHTIP/${_THISHTIP}/g"                   ${fe} &> /dev/null
    sed -i "s/EDIT_UBERCART6/${_UBERCART6}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_UBERCART7/${_UBERCART7}/g"                 ${fe} &> /dev/null
    sed -i "s/EDIT_USE_CURRENT/${_USE_CURRENT}/g"             ${fe} &> /dev/null
    sed -i "s/EDIT_USE_MIR/${_USE_MIR}/g"                     ${fe} &> /dev/null
    sed -i "s/EDIT_USER/${_USER}/g"                           ${fe} &> /dev/null
    sed -i "s/EDIT_USRG/${_USRG}/g"                           ${fe} &> /dev/null
    sed -i "s/EDIT_WEBG/${_WEBG}/g"                           ${fe} &> /dev/null
    sed -i "s/EDIT_X_VERSION/${_X_VERSION}/g"                 ${fe} &> /dev/null
  done
  _THISHOST=$(cat /etc/hostname 2>&1)
  _THISHOST=$(echo -n ${_THISHOST} | tr -d "\n" 2>&1)
  if [ -e "/usr/bin/sipcalc" ]; then
    if [ -z "${_THISHTIP}" ]; then
      _LOC_DOM="${_THISHOST}"
      find_correct_ip
      _THISHTIP="${_LOC_IP}"
    fi
    _IP_TEST=$(sipcalc ${_THISHTIP} 2>&1)
    if [[ "${_IP_TEST}" =~ "ERR" ]]; then
      _IP_TEST_RESULT=FAIL
      _LOCAL_THISHTIP=all
    else
      _IP_TEST_RESULT=OK
      _LOCAL_THISHTIP="${_THISHTIP}"
    fi
  else
    _LOCAL_THISHTIP="${_THISHTIP}"
  fi
  if [ -z "${_LOCAL_THISHTIP}" ]; then
    _LOC_DOM="${_THISHOST}"
    find_correct_ip
    _LOCAL_THISHTIP="${_LOC_IP}"
  fi
  if [ -z "${_LOCAL_THISHTIP}" ]; then
    _LOCAL_THISHTIP=all
  fi
  cp -af ${bldPth}/aegir/scripts/run-xdrago \
    /var/xdrago/run-${_USER} &> /dev/null
  chmod 700 /var/xdrago/run-${_USER} &> /dev/null
  chmod 700 ${bldPth}/aegir/scripts/* &> /dev/null
  bash ${bldPth}/aegir/scripts/AegirSetupA.sh.txt
  if [ -e "/opt/tmp/status-AegirSetupA-FAIL" ]; then
    msg "FATAL ERROR: AegirSetupA installer failed"
    msg "FATAL ERROR: Aborting Octopus installer NOW!"
    touch /opt/tmp/status-Octopus-FAIL
    clean_pid_exit
  fi
  if [ ! -e "${_ROOT}/log/email.txt" ]; then
    echo ${_CLIENT_EMAIL} > ${_ROOT}/log/email.txt
  fi
  if [ ! -e "${_ROOT}/log/option.txt" ]; then
    echo ${_CLIENT_OPTION} > ${_ROOT}/log/option.txt
  fi
  if [ ! -e "${_ROOT}/log/cores.txt" ]; then
    echo ${_CLIENT_CORES} > ${_ROOT}/log/cores.txt
  fi
  if [ ! -e "${_ROOT}/log/subscr.txt" ]; then
    echo ${_CLIENT_SUBSCR} > ${_ROOT}/log/subscr.txt
  fi
  if [ ! -e "${_ROOT}/log/fpm.txt" ]; then
    echo ${_PHP_FPM_VERSION} > ${_ROOT}/log/fpm.txt
  fi
  if [ ! -e "${_ROOT}/log/cli.txt" ]; then
    echo ${_PHP_CLI_VERSION} > ${_ROOT}/log/cli.txt
  fi
  if [ ! -e "${_ROOT}/static/control/.ctrl.240devC.txt" ] \
    || [ ! -e "${_ROOT}/static/control/README.txt" ]; then
    mkdir -p ${_ROOT}/static/control
    chmod 755 ${_ROOT}/static/control
    if [ -e "/var/xdrago/conf/control-readme.txt" ]; then
      cp -af /var/xdrago/conf/control-readme.txt \
        ${_ROOT}/static/control/README.txt &> /dev/null
      chmod 0644 ${_ROOT}/static/control/README.txt
    fi
    chown -R ${_USER}.ftp:${_USRG} \
      ${_ROOT}/static/control &> /dev/null
    rm -f ${_ROOT}/static/control/.ctrl.*
    echo OK > ${_ROOT}/static/control/.ctrl.240devC.txt
  fi
  if [ -d "/data/all/000" ]; then
    if [ ! -e "/data/all/000/core-v-${_SMALLCORE6}.txt" ] \
      || [ ! -e "/data/all/000/core-v-${_SMALLCORE7}.txt" ]; then
      echo "${_SMALLCORE6}" > /data/all/000/core-v-${_SMALLCORE6}.txt
      echo "${_SMALLCORE7}" > /data/all/000/core-v-${_SMALLCORE7}.txt
    fi
  fi
  if [ -e "${_ROOT}/log/email.txt" ]; then
    tune_fpm_config
    force_advanced_nginx_config
    mrun "service nginx reload" &> /dev/null
  fi
}
#
# Test connection.
wait_for_connection() {
  echo " "
  msg "I can not connect to github.com on port 9418 at the moment"
  msg "I will try again in 60 seconds, please wait..."
  msg "Waiting for attempt $1..."
  sleep 60
}
check_connection() {
  if ! netcat -w 14 -z github.com 9418 ; then
    wait_for_connection "2/4"
    if ! netcat -w 14 -z github.com 9418 ; then
      wait_for_connection "3/4"
      if ! netcat -w 14 -z github.com 9418 ; then
        wait_for_connection "4/4"
        if ! netcat -w 14 -z github.com 9418 ; then
          echo " "
          msg "Sorry, I gave up."
          msg "EXIT on error due to GitHub git server at 9418 downtime"
          msg "Please try to run this script again in a few minutes"
          msg "You may want to check https://status.github.com/messages"
          msg "Also, make sure that the git port 9418 is open"
          msg "Bye"
          clean_pid_exit
        fi
      fi
    fi
  fi
}

###--------------------###
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  rm -f -r /opt/tmp/test-*
  check_connection
  _GITHUB_TEST=$(git clone ${gitHub}/provision.git \
    /opt/tmp/test-provision 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]]; then
    echo " "
    msg "EXIT on error (provision) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  _GITHUB_TEST=$(git clone ${gitHub}/hostmaster.git \
    /opt/tmp/test-hostmaster 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]]; then
    echo " "
    msg "EXIT on error (hostmaster) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  rm -f -r /opt/tmp/test-*
fi
if [[ "${_X_VERSION}" =~ "-dev" ]]; then
  rm -f -r /opt/tmp/test-*
  _GITHUB_TEST=$(git clone ${gitHub}/boa.git \
    /opt/tmp/test-boa 2>&1)
  if [[ "${_GITHUB_TEST}" =~ "fatal" ]]; then
    echo " "
    msg "EXIT on error (boa) due to GitHub downtime"
    msg "Please try to run this script again in a few minutes"
    msg "You may want to check https://status.github.com/messages"
    msg "Bye"
    rm -f -r /opt/tmp/test-*
    clean_pid_exit
  fi
  rm -f -r /opt/tmp/test-*
fi

###--------------------###
if [ ! -e "/var/run/mysqld/mysqld.pid" ] \
  || [ ! -e "/var/run/mysqld/mysqld.sock" ]; then
  _DB_SERVER_TEST=$(mysql -V 2>&1)
  if [[ "${_DB_SERVER_TEST}" =~ "MariaDB" ]]; then
    _DB_SERVER=MariaDB
    msg "ALRT! ${_DB_SERVER} server not running properly!"
    msg "EXIT: We can't proceed and will exit now"
    msg "HINT: Please (re)start ${_DB_SERVER} server and then run installer again"
    msg "Bye"
  else
    msg "ALRT! ${_DB_SERVER} server not installed properly!"
    msg "EXIT: We can't proceed and will exit now"
    msg "Bye"
  fi
  clean_pid_exit
fi

###--------------------###
_LASTNUM=001
_LAST_HMR=001
_LAST_ALL=001
_DISTRO=001
_HM_DISTRO=001
_ALL_DISTRO=001
_STATUS=INIT

###---### START
#
# Make sure it is running as root
if [ `whoami` = "root" ]; then
  chmod a+w /dev/null
  if [ ! -e "/dev/fd" ]; then
    if [ -e "/proc/self/fd" ]; then
      rm -rf /dev/fd
      ln -s /proc/self/fd /dev/fd
    fi
  fi
else
  msg "ERROR: This script should be ran as a root user"
  msg "Bye"
  clean_pid_exit
fi

###
### Sanitize _USER and check the status
###
_USER=${_USER//[^a-zA-Z0-9-.]/}
_USER=$(echo -n ${_USER} | tr A-Z a-z 2>&1)
_ROOT="/data/disk/${_USER}"
if [ -d "${_ROOT}" ]; then
  _STATUS=UPGRADE
fi
if [ "${_STATUS}" = "INIT" ]; then
  check_id
fi
echo " "
msg "Skynet Agent v.${_X_VERSION} welcomes you aboard!"
echo " "
sleep 3

###
### Include default settings
###
if [ -e "${vBs}/${tocIncO}" ]; then
  source "${vBs}/${tocIncO}"
  tInc="${vBs}/${tocIncO}"
elif [ -e "${vBs}/${filIncO}" ]; then
  source "${vBs}/${filIncO}"
  tInc="${vBs}/${filIncO}"
else
  msg "EXIT: Required lib file does not exist?"
  msg "EXIT: ${tInc}"
  msg "EXIT: Cannot continue"
  msg "EXIT: Bye (0)"
  clean_pid_exit
fi
touch /var/run/boa_run.pid

###
### Restart pdnsd server
###
if [ -d "/var/cache/pdnsd" ]; then
  service pdnsd stop &> /dev/null
  sleep 1
  rm -f /var/cache/pdnsd/pdnsd.cache
  sleep 1
  service pdnsd start &> /dev/null
fi
find_fast_mirror

###
### Some auto-magic for localhost install
###
_THIS_HOST=$(uname -n 2>&1)
if [ "${_THIS_HOST}" = "aegir.local" ] && [ ! -d "${_ROOT}" ]; then
  _DEBUG_MODE=NO
  _DNS_SETUP_TEST=NO
  _DOMAIN="${_USER}.sub.aegir.local"
  _LOCAL_NETWORK_IP="127.0.1.1"
  _MY_OWNIP="${_LOCAL_NETWORK_IP}"
  msg "_LOCAL_NETWORK_IP is ${_LOCAL_NETWORK_IP}"
fi

###
### Sanitize _DOMAIN
###
_DOMAIN=${_DOMAIN//[^a-zA-Z0-9-.]/}
_DOMAIN=$(echo -n ${_DOMAIN} | tr A-Z a-z 2>&1)

###
### Detect VM family
###
_ETH_TEST=$(ifconfig 2>&1)
if [[ "${_ETH_TEST}" =~ "venet0" ]]; then
  _IFCONFIG="venet0"
elif [ -e "/proc/bean_counters" ]; then
  _IFCONFIG="venet0"
else
  _IFCONFIG="eth0"
fi
_VM_TEST=$(uname -a 2>&1)
if [[ "${_VM_TEST}" =~ beng ]]; then
  _VMFAMILY="VS"
else
  _VMFAMILY="XEN"
fi
_AWS_TEST_A=$(grep cloudimg /etc/fstab 2>&1)
_AWS_TEST_B=$(grep cloudconfig /etc/fstab 2>&1)
if [[ "${_AWS_TEST_A}" =~ "cloudimg" ]] \
  || [[ "${_AWS_TEST_B}" =~ "cloudconfig" ]]; then
  _VMFAMILY="AWS"
  if [ "${_STATUS}" = "INIT" ]; then
    _THIS_DB_HOST=localhost
  fi
  _LOC_DOM="${_DOMAIN}"
  if [ -z "${_MY_OWNIP}" ]; then
    find_correct_ip
    _MY_OWNIP="${_LOC_IP}"
  else
    _LOC_IP="${_MY_OWNIP}"
  fi
fi

###
### Main
###
octopus_cnf
#
#
if [ ! -z "${_LOCAL_NETWORK_IP}" ] && [ "${_THIS_HOST}" != "aegir.local" ]; then
  _DNS_SETUP_TEST=NO
  _MY_OWNIP="${_LOCAL_NETWORK_IP}"
fi
#
#
_BOA_REPO_NAME="boa"
_BOA_REPO_GIT_URL="${gitHub}"
_BOA_REPO_GIT_URLX=${_BOA_REPO_GIT_URL//\//\\\/}
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  check_git_repos_status
fi
octInc="${_ROOT}/config/includes"
octTpl="${_ROOT}/.drush/sys/provision/http/Provision/Config/Nginx"
#
#
if [ ! -f "/var/log/barracuda_log.txt" ]; then
  msg "ERROR: This script should be used only when the same version of BOA"
  msg "was used before. Your system has to be configured/upgraded by BOA"
  msg "version ${_X_VERSION} first"
  msg "Bye"
  clean_pid_exit
else
  _VERSIONS_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
  if [[ "${_VERSIONS_TEST}" =~ "${_X_VERSION}" ]]; then
    _VERSIONS_TEST_RESULT=OK
  else
    msg "ERROR: This script should be used only when the same version of BOA"
    msg "was used before. Your system has to be configured/upgraded by BOA"
    msg "version ${_X_VERSION} first"
    msg "Bye"
    clean_pid_exit
  fi
fi
if [ -e "/var/log/barracuda_log.txt" ]; then
  _SERIES_TEST=$(cat /var/log/barracuda_log.txt 2>&1)
  if [[ "${_SERIES_TEST}" =~ "BOA-2.4." ]]; then
    if [[ ! "${_X_VERSION}" =~ "BOA-2.4." ]]; then
      msg "ERROR: Your system has been already upgraded to BOA-2.4.x series"
      msg "ERROR: You can not downgrade to legacy or previous stable version"
      msg "Bye"
      clean_pid_exit
    fi
  fi
fi
if [ -e "${_ROOT}/log/octopus_log.txt" ]; then
  _SERIES_TEST=$(cat ${_ROOT}/log/octopus_log.txt 2>&1)
  if [[ "${_SERIES_TEST}" =~ "BOA-2.3." ]] \
    || [[ "${_SERIES_TEST}" =~ "BOA-2.4." ]]; then
    _SERIES_RESULT=OK
  fi
fi
#
#
rm -f /var/run/aegir_upgrade.pid
rm -f /opt/tmp/testecho*
_SRCDIR="/opt/tmp/files"
mkdir -p ${_SRCDIR}
chmod -R 777 /opt/tmp &> /dev/null
cd /opt/tmp
rm -f -r ${bldPth}
if [ "${_AEGIR_VERSION}" = "HEAD" ]; then
  ${gCb} ${_BRANCH_BOA} ${_BOA_REPO_GIT_URL}/${_BOA_REPO_NAME}.git &> /dev/null
else
  curl ${crlGet} "${urlStb}/tar/boa-${_X_VERSION}.tar.gz" | tar -xzf -
  _BOA_REPO_NAME="boa"
fi
if [ ! -e "${bldPth}/aegir/helpers/apt.conf.noninteractive" ]; then
  echo " "
  msg "EXIT on error due to missing helpers"
  msg "Please try to run this script again in a few minutes"
  msg "Also, make sure that the git port 9418 is open"
  msg "Bye"
  clean_pid_exit
fi
#
# Get spinner
cd ${_SRCDIR}
rm -f spinner*
cp -af ${bldPth}/aegir/helpers/spinner ./
chmod +x spinner &> /dev/null
#
# Create tmp stuff
_LOG=${vBs}/octopus-${_USER}-${_NOW}.log
touch ${_LOG}
chmod 646 ${_LOG}
_SILENT=/opt/tmp/silent.log
#
#
if [ -d "${_ROOT}" ]; then
  msg "Octopus Satellite Instance Upgrade in progress..."
  if [ -d "${_ROOT}/distro" ]; then
    if [ -e "${_ROOT}/log/domain.txt" ]; then
      _DOMAIN=$(cat ${_ROOT}/log/domain.txt 2>&1)
      _DOMAIN=$(echo -n ${_DOMAIN} | tr -d "\n" 2>&1)
    fi
    if [ -z "${_DOMAIN}" ]; then
      msg "ALERT! _DOMAIN is e-m-p-t-y, exit now"
      clean_pid_exit
    fi
    if [ -z "${_USER}" ]; then
      msg "ALERT! _USER is e-m-p-t-y, exit now"
      clean_pid_exit
    fi
    _CHECK_HOST=$(uname -n 2>&1)
    if [ -e "/root/.auto.up.cnf" ] \
      || [ -e "/root/.host8.cnf" ] \
      || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
      || [ "${_VMFAMILY}" = "VS" ]; then
      if [ -e "${_ROOT}/log/amazing_upgrade.txt" ] \
        && [ ! -e "${_ROOT}/log/amazing_upgrade_complete.txt" ]; then
        if [ -e "${_ROOT}/log/original_option.txt" ]; then
          cp -af ${_ROOT}/log/option.txt \
            ${_ROOT}/log/prev_option.txt
          cp -af ${_ROOT}/log/original_option.txt \
            ${_ROOT}/log/option.txt
        fi
        if [ -e "${_ROOT}/log/original_cores.txt" ]; then
          cp -af ${_ROOT}/log/cores.txt \
            ${_ROOT}/log/prev_cores.txt
          cp -af ${_ROOT}/log/original_cores.txt \
            ${_ROOT}/log/cores.txt
        fi
        echo completed > ${_ROOT}/log/amazing_upgrade_complete.txt
      fi
    fi
    if [ -e "${_ROOT}/log/option.txt" ]; then
      _CLIENT_OPTION=$(cat ${_ROOT}/log/option.txt 2>&1)
      _CLIENT_OPTION=$(echo -n ${_CLIENT_OPTION} | tr -d "\n" 2>&1)
    fi
    if [ -e "${_ROOT}/log/cores.txt" ]; then
      _CLIENT_CORES=$(cat ${_ROOT}/log/cores.txt 2>&1)
      _CLIENT_CORES=$(echo -n ${_CLIENT_CORES} | tr -d "\n" 2>&1)
    fi
    if [ -e "${_ROOT}/log/subscr.txt" ]; then
      _CLIENT_SUBSCR=$(cat ${_ROOT}/log/subscr.txt 2>&1)
      _CLIENT_SUBSCR=$(echo -n ${_CLIENT_SUBSCR} | tr -d "\n" 2>&1)
    fi
    if [ -e "${_ROOT}/log/email.txt" ]; then
      _CLIENT_EMAIL=$(cat ${_ROOT}/log/email.txt 2>&1)
      _CLIENT_EMAIL=$(echo -n ${_CLIENT_EMAIL} | tr -d "\n" 2>&1)
      if [[ "${_CLIENT_EMAIL}" =~ "@" ]]; then
        _DO_NOTHING=YES
      else
        msg "EXIT: You must enter your valid e-mail address in the"
        msg "EXIT: _CLIENT_EMAIL variable written both in the"
        msg "EXIT: ${octCnf} file and in the"
        msg "EXIT: ${_ROOT}/log/email.txt file"
        msg "EXIT: Bye (1)"
        clean_pid_exit
      fi
      _CLIENT_EMAIL=${_CLIENT_EMAIL//\\\@/\@}
    fi
    if [[ "${_CLIENT_EMAIL}" =~ "omega8.cc" ]]; then
      _CHECK_HOST=$(uname -n 2>&1)
      if [ -e "/root/.auto.up.cnf" ] \
        || [ -e "/root/.host8.cnf" ] \
        || [[ "${_CHECK_HOST}" =~ ".host8." ]] \
        || [ "${_VMFAMILY}" = "VS" ]; then
        _DO_NOTHING=YES
      else
        msg "EXIT: You must enter your valid e-mail address in the"
        msg "EXIT: _CLIENT_EMAIL variable written both in the"
        msg "EXIT: ${octCnf} file and in the"
        msg "EXIT: ${_ROOT}/log/email.txt file"
        msg "EXIT: Bye (2)"
        clean_pid_exit
      fi
    fi
    #
    # Check for last distro nr
    if [ -d "${_ROOT}/distro" ]; then
      cd ${_ROOT}/distro
      list=([0-9]*)
      last=${list[@]: -1}
      _LASTNUM=$last
      nextnum=00$((10#${last%%[^0-9]*} + 1))
      nextnum=${nextnum: -3}
      _DISTRO=${nextnum}
    fi
    #
    # Check for last hm nr
    if [ -d "${_ROOT}/aegir/distro" ]; then
      cd ${_ROOT}/aegir/distro
      listx=([0-9]*)
      lastx=${listx[@]: -1}
      _LAST_HMR=$lastx
      nextnumx=00$((10#${lastx%%[^0-9]*} + 1))
      nextnumx=${nextnumx: -3}
      _HM_DISTRO=${nextnumx}
    fi
    #
    # Check for last all nr
    if [ -d "/data/all" ]; then
      cd /data/all
      listl=([0-9]*)
      lastl=${listl[@]: -1}
      _LAST_ALL=$lastl
      nextnuml=00$((10#${lastl%%[^0-9]*} + 1))
      nextnuml=${nextnuml: -3}
      _ALL_DISTRO=${nextnuml}
    fi
  #
  #
  elif [ ! -d "${_ROOT}/distro" ]; then
    if [ -e "${_ROOT}/log/domain.txt" ]; then
      _DOMAIN=$(cat ${_ROOT}/log/domain.txt 2>&1)
      _DOMAIN=$(echo -n ${_DOMAIN} | tr -d "\n" 2>&1)
    fi
  fi
else
  msg "New Octopus Setup on $(uname -m 2>&1) in progress..."
  #
  # Check for last all nr
  if [ -d "/data/all" ]; then
    cd /data/all
    listl=([0-9]*)
    lastl=${listl[@]: -1}
    _LAST_ALL=$lastl
    nextnuml=00$((10#${lastl%%[^0-9]*} + 1))
    nextnuml=${nextnuml: -3}
    _ALL_DISTRO=${nextnuml}
  fi
fi
#
#
if [ ! -f "/var/aegir/config/server_master/nginx/vhost.d/${_DOMAIN}" ]; then
  _DO_NOTHING=YES
else
  msg "ERROR: ${_DOMAIN} is already used on the Aegir Master Instance"
  msg "Please change the value for _DOMAIN to make it unique"
  msg "Bye"
  clean_pid_exit
fi
#
#
if [ "${_DNS_SETUP_TEST}" = "YES" ]; then
  if [ "${_VMFAMILY}" = "AWS" ]; then
    _LOC_DOM="${_DOMAIN}"
    if [ -z "${_MY_OWNIP}" ]; then
      find_correct_ip
      _MY_OWNIP="${_LOC_IP}"
    else
      _LOC_IP="${_MY_OWNIP}"
    fi
  fi
  if [ -z "${_MY_OWNIP}" ]; then
    _THISHTIP=$(ifconfig ${_IFCONFIG} \
      | grep 'inet addr:' \
      | cut -d: -f2 \
      | awk '{ print $1}' 2>&1)
    if [[ "${_THISHTIP}" =~ "127.0.0." ]]; then
      _THISHTIP=$(ifconfig ${_IFCONFIG}:0 \
        | grep 'inet addr:' \
        | cut -d: -f2 \
        | awk '{ print $1}' 2>&1)
    fi
  else
    _THISHTIP="${_MY_OWNIP}"
  fi
  _LOC_DOM="${_DOMAIN}"
  find_correct_ip
  _THISRDIP="${_LOC_IP}"
  if [ "$_THISRDIP" = "${_THISHTIP}" ]; then
    _DO_NOTHING=YES
  else
    msg "ERROR: ${_DOMAIN} doesn't point to your IP: ${_THISHTIP}"
    msg "Please make sure you have a valid A record in your DNS"
    msg "It is also possible that DNS change didn't propagate yet"
    msg "Bye"
    clean_pid_exit
  fi
else
  if [ -z "${_MY_OWNIP}" ]; then
    _LOC_DOM="${_DOMAIN}"
    find_correct_ip
    _THISHTIP="${_LOC_IP}"
    _THISRDIP="${_LOC_IP}"
  else
    _THISHTIP="${_MY_OWNIP}"
    _THISRDIP="${_MY_OWNIP}"
  fi
fi
#
#
if [ "${_DEBUG_MODE}" = "YES" ]; then
  echo " "
  msg "START -> checkpoint: "
fi
if [ "${_STATUS}" = "INIT" ]; then
  modeDetect="installation"
  optInf="${_CLIENT_OPTION} / ${_CLIENT_SUBSCR} / ${_CLIENT_CORES} C"
  cat <<EOF

  * Your e-mail address is ${_MY_EMAIL}
  * Your client e-mail address is ${_CLIENT_EMAIL}
  * Your Aegir control panel for this instance will be available at:
      https://${_DOMAIN}
  * Your Aegir system user for this instance will be ${_USER}
  * This Octopus will use PHP-CLI ${_PHP_CLI_VERSION} for all sites
  * This Octopus will use PHP-FPM ${_PHP_FPM_VERSION} for all sites
  * This Octopus includes platforms: ${_PLATFORMS_LIST}
  * This Octopus options are listed as ${optInf}

EOF
else
  modeDetect="upgrade"
  if [ "${_DEBUG_MODE}" = "YES" ]; then
    optInf="${_CLIENT_OPTION} / ${_CLIENT_SUBSCR} / ${_CLIENT_CORES} C"
    cat <<EOF

  * Your Aegir control panel for this instance is available at:
      https://${_DOMAIN}
  * Your Aegir system user for this instance is ${_USER}
  * This Octopus will use PHP-CLI ${_PHP_CLI_VERSION} for all sites
  * This Octopus will use PHP-FPM ${_PHP_FPM_VERSION} for all sites
  * This Octopus includes platforms: ${_PLATFORMS_LIST}
  * This Octopus options are listed as ${optInf}

EOF
  else
    echo " "
    thiSys="$(lsb_release -si 2>&1)/$(lsb_release -sc 2>&1) $(uname -m 2>&1)"
    msg "This Octopus URL address is ${_DOMAIN}"
    msg "This Octopus PHP version is ${_PHP_FPM_VERSION}"
    msg "This Octopus System is ${thiSys}"
    echo " "
  fi
fi

_MY_EMAIL=${_MY_EMAIL//\@/\\\@}
_RAW_CLIENT_EMAIL="${_CLIENT_EMAIL}"
_CLIENT_EMAIL=${_CLIENT_EMAIL//\@/\\\@}

###--------------------###
if [ -f "/var/aegir/config/server_master/nginx/pre.d/nginx_speed_purge.conf" ]; then
  _PURGE_MODE=ON
else
  _PURGE_MODE=OFF
fi


if [ "${_DEBUG_MODE}" = "YES" ]; then
  msg "8s before we will continue..."
fi
sleep 8
rm -f /tmp/cache.inc*
rm -f /opt/tmp/status-*
rm -f -r /tmp/drush_make_tmp*
rm -f -r /tmp/make_tmp*
rm -f /tmp/pm-updatecode*
if [ -e "/home/${_USER}.ftp" ]; then
  disable_chattr ${_USER}.ftp
fi
action
if [ -e "/home/${_USER}.ftp" ]; then
  enable_chattr ${_USER}.ftp
fi
rm -f /tmp/cache.inc*
rm -f -r /var/opt/*
rm -f -r /tmp/drush_make_tmp*
rm -f -r /tmp/make_tmp*
rm -f /tmp/pm-updatecode*
rm -f /var/run/boa_run.pid
rm -f -r ${_ROOT}/.tmp/cache
rm -f /var/run/manage_ltd_users.pid
rm -f /var/run/manage_rvm_users.pid
exit 0


###----------------------------------------###
###
###  Octopus Aegir Installer
###  Copyright (C) 2010-2015 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
